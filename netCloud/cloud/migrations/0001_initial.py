# Generated by Django 3.2.17 on 2023-02-26 10:28

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_subscribe', models.BooleanField(default=False, verbose_name='是否订阅')),
                ('disk_remaining', models.FloatField(default=1048576, verbose_name='用户存储空间剩余容量(KiloBytes)')),
                ('disk_total', models.BigIntegerField(default=1048576, verbose_name='用户存储空间总量(KiloBytes)')),
                ('is_delete', models.BooleanField(default=False, verbose_name='是否删除')),
                ('ext_info', models.CharField(max_length=3200, verbose_name='扩展信息')),
            ],
            options={
                'verbose_name': '用户',
                'verbose_name_plural': '用户',
                'db_table': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file_name', models.CharField(max_length=64, verbose_name='文件名')),
                ('file_type', models.CharField(choices=[('D', 'Directory'), ('T', 'Text'), ('I', 'Image')], max_length=1, verbose_name='文件类型')),
                ('file_size', models.FloatField(verbose_name='文件大小(KiloBytes)')),
                ('store_path', models.CharField(max_length=320, verbose_name='HDFS存储路径')),
                ('is_delete', models.BooleanField(default=False, verbose_name='是否删除')),
                ('ext_info', models.CharField(max_length=3200, verbose_name='扩展信息')),
            ],
            options={
                'verbose_name': '文件',
                'verbose_name_plural': '文件',
                'db_table': 'file',
            },
        ),
        migrations.CreateModel(
            name='SubRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('subscribe_at', models.DateTimeField(auto_now_add=True, verbose_name='订阅开始时间')),
                ('subscribe_type', models.IntegerField(choices=[(30, 'month'), (90, 'months'), (180, 'half'), (360, 'year')], verbose_name='订阅类型')),
                ('invalid', models.BooleanField(default=False, verbose_name='订阅是否到期')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sub_records', to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '订阅记录',
                'verbose_name_plural': '订阅记录',
                'db_table': 'sub_record',
            },
        ),
        migrations.CreateModel(
            name='FileOperateRecord',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('operate_type', models.CharField(choices=[('U', 'Upload'), ('D', 'Down'), ('S', 'Share')], max_length=1, verbose_name='操作类型')),
                ('operate_at', models.DateTimeField(auto_now_add=True, verbose_name='操作时间')),
                ('file', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='file_operate_records', to='cloud.file', verbose_name='文件')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='file_operate_records', to=settings.AUTH_USER_MODEL, verbose_name='用户')),
            ],
            options={
                'verbose_name': '文件操作记录',
                'verbose_name_plural': '文件操作记录',
                'db_table': 'file_operator_record',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='files',
            field=models.ManyToManyField(related_name='users', to='cloud.File', verbose_name='用户文件'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
